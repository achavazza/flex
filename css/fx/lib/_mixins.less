// main: ../fx.less

// Table of Contents
// ======================================================================================================
// # Clearfix
// # For
// # Constructor mixin
// # Mixins

// #Clearfix
// ================================
.clearfix(){
    &:after{
        clear:both;
        content:' ';
        display:block;
        font-size:0;
        line-height:0;
        visibility:hidden;
        width:0;
        height:0;
    }
    * html &,
    *:first-child+html &{
        zoom:1;
    }
}


// #For
// ================================

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}

// #Constructor
// ================================

/*.__constructorDef (@t){
    @i: @t;
    .for(@t); .-each(@i){
        .col-@{i}{
            max-width: 100% * (@i / @t);
            flex-basis: 100% * (@i / @t);
        }
    }
}
.__constructorRes (@t, @display) when (iskeyword(@display)){
    @i: @t;
    .for(@t); .-each(@i){
        //.col-@{i}-@{display}{
        .col-@{display}-@{i}{
            max-width: 100% * (@i / @t);
            flex-basis: 100% * (@i / @t);
        }
    }
}
.__constructorDisplay (@display) when (iskeyword(@display)){
    .col-@{display}{
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
    }
}
*/
.__generateDef (@t, @i: 1) when (@i =< @t) {
    .col-@{i}{
        max-width: 100% * (@i / @t);
        flex-basis: 100% * (@i / @t);
    }
    .__generateDef(@t, (@i + 1));
}

.__generateDisplay (@display){
    .col-@{display}{
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
    }
}
.__generateRes (@t, @i: 1, @display) when (@i =< @t) {
    .col-@{display}-@{i}{
        max-width: 100% * (@i / @t);
        flex-basis: 100% * (@i / @t);
    }
    .__generateRes(@t, (@i + 1), @display);
}
.__constructorProp (@t, @prop, @property){
    @i: @t;
    .for(@t); .-each(@i){
        .@{prop}-@{i}[class*="col-"] {
            @{property}: 100% * (@i / @t)
        }
    }
}
.__constructorProp (@t, @prop, @property, @display) when (iskeyword(@display)){
    @i: @t;
    .for(@t); .-each(@i){
        //.@{prop}-@{i}-@{display}[class*="col-"] {
        .@{prop}-@{display}-@{i}[class*="col-"] {
            @{property}: 100% * (@i / @t)
        }
    }
}


.__generateGrid(@number) {
    .__constructor     (@number);
    //.__constructorProp (@number, prefix, margin-left );
    //.__constructorProp (@number, suffix, margin-right); //deprecated
    //.__constructorProp (@number, push  , left        );
    //.__constructorProp (@number, pull  , right       );
}

.__generateGridResponsive(@number, @device) {
    .__constructorDisplay (@device);
    .__constructorRes     (@number, @device);
    //.__constructorProp (@number, prefix, margin-left , @device);
    //.__constructorProp (@number, suffix, margin-right, @device); //deprecated
    //.__constructorProp (@number, push  , left        , @device);
    //.__constructorProp (@number, pull  , right       , @device);
}

/*.__generateSetupSnap(@grids) {
    .for(@grids);
    .-each(@item) {
        @name: e(replace(@item, ':(.*)', ''));
        [class*="col-"]{
            .grid-snap &,
            .row-snap > &{
                padding-left: 0;
                padding-right: 0;
            }
        }
    }
}*/

.output(@mixin){
    .setup() when (@mixin = setup){
        [class*="col-"]{
            box-sizing: border-box;
            flex: 0 0 auto;
            padding-left:  @gutter;
            padding-right: @gutter;
        }
    }
    /*
    .pushpull when (@mixin = pushpull){
        [class*="col-"][class*="push"],
        [class*="col-"][class*="pull"]{
            position: relative;
        }
    }
    .gridsnap when (@mixin = gridsnap){
        [class*="col-"]{
            .grid-snap &,
            .row-snap > &{
                padding-left: 0;
                padding-right: 0;
            }
        }
    }
    .colcentered when (@mixin = colcentered){
        [class*="col-"]{
            .grid-centered &,
            .row-centered > &{
                display: block;
                float:   none;
                margin: 0 auto !important;
            }
        }
    }

    .debug when (@mixin = debug){
        [class*="col-"]{
            background: rgba(255,0,0,0.1) !important;
            //box-shadow: 0 0 transparent ,
            //            0 0 transparent !important;
        }
    }
    .debugsm when (@mixin = debugsm){
        [class*="col-"]{
            background: rgba(255,0,0,0.1) !important;
            box-shadow: @gutter 0 rgba(255, 0, 0, 0.2) inset,
            -@gutter 0 rgba(255, 0, 0, 0.2) inset  !important;
            background-clip: content-box !important;
        }
    }
    */
    .setup();
    //.pushpull();
    //.gridsnap();
    //.colcentered();
    //.debug();
    //.debugsm();
}

.__generateSetup(@mixin) {
    .output(@mixin);
}

.__tools(@t){
    .start-@{t} { justify-content: flex-start; text-align: start; }
    .center-@{t} { justify-content: center; text-align: center; }
    .end-@{t} { justify-content: flex-end; text-align: end; }
    .top-@{t} { align-items: flex-start; }
    .middle-@{t} { align-items: center; }
    .bottom-@{t} { align-items: flex-end; }
    .around-@{t} { justify-content: space-around; }
    .between-@{t} { justify-content: space-between; }
    .first-@{t} { order: -1; }
    .last-@{t} { order: 1; }
}


// #Mixins
// ================================

// Gradient generator
// --------------------------------
// thanks to http://lesselements.com

.gradient(@start: #EEE, @stop: #FFF, @repeat: repeat-x) {
    background-color: @start;
    //background-image: -webkit-linear-gradient(top, @start 0%, @stop 100%);
    //background-image: -moz-linear-gradient(center bottom, @start 0%, @stop 100%);
    background-image: linear-gradient(to bottom, @start 0%, @stop 100%);
    background-repeat: @repeat;
}
.gradient-h(@start: #EEE, @stop: #FFF, @repeat: repeat-x) {
    background-color: @start; /* Old browsers */
    //background-image: -webkit-linear-gradient(left, @start 0%,@stop 100%);
    //background-image: -moz-linear-gradient(left, @start 0%, @stop 100%);
    background-image: linear-gradient(to right, @start 0%,@stop 100%);
    background-repeat: @repeat;
}

// Box model
// --------------------------------

.box-model(@model: border-box){
    //-webkit-box-sizing: @model;
    //-moz-box-sizing: @model;
    box-sizing: @model;
}

// Transitions
// --------------------------------

.transition(@prop:all, @duration:0s, @easing:linear, @delay:0s){
    //-webkit-transition: @prop @duration @easing @delay;
    //-moz-transition: @prop @duration @easing @delay;
    transition: @prop @duration @easing @delay;
}

// User select
// --------------------------------

.user-select(@type: none){
    //-webkit-user-drag:   @type;
    //-webkit-user-select: @type;
    //-moz-user-select: @type;
    user-select: @type;
}

// Font color
// --------------------------------
.color(@bgcolor, @threshold:30%, @dark:@baseFontColor, @light:@altFontColor){
    color:contrast(@bgcolor, @dark, @light, @threshold);
}

// Font contrast
// --------------------------------

.contrast (@bgColor, @shadow: true, @threshold: 30%, @dark:@baseFontColor, @light:@altFontColor ){
    @fontColor : contrast(@bgColor, @dark, @light , @threshold);
    color: @fontColor;
    .shadow() when (@shadow = true){
        .contrastShadow() when (lightness(@bgColor) >= lightness(@fontColor)){
            text-shadow: 0 1px 0 fade(contrast(@fontColor, @dark, @light, @threshold), 20%);
        }
        .contrastShadow() when (lightness(@bgColor) < lightness(@fontColor)){
            text-shadow: 0 -1px 0 fade(contrast(@fontColor, @dark, @light, @threshold), 20%);
        }
        .contrastShadow();
    }
    .shadow();
}

// Box element mixin
// --------------------------------

.box(@pdBox){
    padding: @pdBox;
}

.boxHead(@pdBox){
    margin: -@pdBox -@pdBox @pdBox;
    padding: @pdBox;
}

.boxFoot(@pdBox){
    margin: @pdBox -@pdBox -@pdBox;
    padding: @pdBox;
}

.boxContent(@pdBox){
    margin: 0 -@pdBox;
    padding: @pdBox;
}

.boxWrap(@pdBox){
    margin: 0 -@pdBox;
}

// Box element mixin
// --------------------------------
.fontProps(@fs){
    //font-size: @fs;
    font-size: round((@fs / @baseFontSize) * 1em, 4);
    @calc : round((@base / @fs) * 1em, 4);
    line-height:   @calc;
    margin-top:    @calc * @hModTop;
    margin-bottom: @calc * @hModBottom;
}
.fontProps(@fs) when (@base < @fs) {
    font-size: round((@fs / @baseFontSize) * 1em, 4);
    @calcAlt : round(((@base * 2) / @fs) * 1em, 4);
    @calc    : round(( @base / @fs) * 1em, 4);
    line-height:   @calcAlt;
    margin-top:    @calc * @hModTop;
    margin-bottom: @calc * @hModBottom;
}
